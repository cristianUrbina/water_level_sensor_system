// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/application/sensor_measurement/add_sensor_measurement_handler.go
//
// Generated by this command:
//
//	mockgen -source=./internal/application/sensor_measurement/add_sensor_measurement_handler.go -destination=./testutils/add_sensor_measurement_handler_mock.go -package=testutils
//

// Package testutils is a generated GoMock package.
package testutils

import (
	context "context"
	sensormeasurementapp "cristianUrbina/water_level_sensor_system/internal/application/sensor_measurement"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIAddSensorMeasurementHandler is a mock of IAddSensorMeasurementHandler interface.
type MockIAddSensorMeasurementHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIAddSensorMeasurementHandlerMockRecorder
	isgomock struct{}
}

// MockIAddSensorMeasurementHandlerMockRecorder is the mock recorder for MockIAddSensorMeasurementHandler.
type MockIAddSensorMeasurementHandlerMockRecorder struct {
	mock *MockIAddSensorMeasurementHandler
}

// NewMockIAddSensorMeasurementHandler creates a new mock instance.
func NewMockIAddSensorMeasurementHandler(ctrl *gomock.Controller) *MockIAddSensorMeasurementHandler {
	mock := &MockIAddSensorMeasurementHandler{ctrl: ctrl}
	mock.recorder = &MockIAddSensorMeasurementHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAddSensorMeasurementHandler) EXPECT() *MockIAddSensorMeasurementHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIAddSensorMeasurementHandler) Handle(ctx context.Context, query *sensormeasurementapp.AddSensorMeasurementQuery) (*sensormeasurementapp.AddSensorMeasurementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, query)
	ret0, _ := ret[0].(*sensormeasurementapp.AddSensorMeasurementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIAddSensorMeasurementHandlerMockRecorder) Handle(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIAddSensorMeasurementHandler)(nil).Handle), ctx, query)
}
