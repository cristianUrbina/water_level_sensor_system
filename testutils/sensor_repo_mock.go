// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/sensordm/repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/sensordm/repository.go -destination=./testutils/sensor_repo_mock.go -package=testutils
//

// Package testutils is a generated GoMock package.
package testutils

import (
	sensordm "cristianUrbina/water_level_sensor_system/internal/domain/sensordm"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockISensorRepository is a mock of ISensorRepository interface.
type MockISensorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISensorRepositoryMockRecorder
	isgomock struct{}
}

// MockISensorRepositoryMockRecorder is the mock recorder for MockISensorRepository.
type MockISensorRepositoryMockRecorder struct {
	mock *MockISensorRepository
}

// NewMockISensorRepository creates a new mock instance.
func NewMockISensorRepository(ctrl *gomock.Controller) *MockISensorRepository {
	mock := &MockISensorRepository{ctrl: ctrl}
	mock.recorder = &MockISensorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISensorRepository) EXPECT() *MockISensorRepositoryMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockISensorRepository) GetById(arg0 uuid.UUID) (*sensordm.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*sensordm.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockISensorRepositoryMockRecorder) GetById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockISensorRepository)(nil).GetById), arg0)
}
