// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/sensor_measurement/repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/sensor_measurement/repository.go -destination=./testutils/sensor_repository_mock.go -package=testutils
//

// Package testutils is a generated GoMock package.
package testutils

import (
	sensormeasurement "cristianUrbina/water_level_sensor_system/internal/domain/sensor_measurement"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockISensorMeasurementRepository is a mock of ISensorMeasurementRepository interface.
type MockISensorMeasurementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISensorMeasurementRepositoryMockRecorder
	isgomock struct{}
}

// MockISensorMeasurementRepositoryMockRecorder is the mock recorder for MockISensorMeasurementRepository.
type MockISensorMeasurementRepositoryMockRecorder struct {
	mock *MockISensorMeasurementRepository
}

// NewMockISensorMeasurementRepository creates a new mock instance.
func NewMockISensorMeasurementRepository(ctrl *gomock.Controller) *MockISensorMeasurementRepository {
	mock := &MockISensorMeasurementRepository{ctrl: ctrl}
	mock.recorder = &MockISensorMeasurementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISensorMeasurementRepository) EXPECT() *MockISensorMeasurementRepositoryMockRecorder {
	return m.recorder
}

// AddSensoreMeasurement mocks base method.
func (m *MockISensorMeasurementRepository) AddSensoreMeasurement(arg0 *sensormeasurement.SensorMeasurement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSensoreMeasurement", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSensoreMeasurement indicates an expected call of AddSensoreMeasurement.
func (mr *MockISensorMeasurementRepositoryMockRecorder) AddSensoreMeasurement(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSensoreMeasurement", reflect.TypeOf((*MockISensorMeasurementRepository)(nil).AddSensoreMeasurement), arg0)
}
