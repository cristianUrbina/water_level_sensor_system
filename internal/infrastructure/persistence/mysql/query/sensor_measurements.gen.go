// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	sensormeasurement "cristianUrbina/water_level_sensor_system/internal/domain/sensor_measurement"
)

func newSensorMeasurement(db *gorm.DB, opts ...gen.DOOption) sensorMeasurement {
	_sensorMeasurement := sensorMeasurement{}

	_sensorMeasurement.sensorMeasurementDo.UseDB(db, opts...)
	_sensorMeasurement.sensorMeasurementDo.UseModel(&sensormeasurement.SensorMeasurement{})

	tableName := _sensorMeasurement.sensorMeasurementDo.TableName()
	_sensorMeasurement.ALL = field.NewAsterisk(tableName)
	_sensorMeasurement.ID = field.NewField(tableName, "id")
	_sensorMeasurement.SensorID = field.NewField(tableName, "sensor_id")
	_sensorMeasurement.MeasuredAt = field.NewTime(tableName, "measured_at")
	_sensorMeasurement.Value = field.NewFloat64(tableName, "value")
	_sensorMeasurement.Type = field.NewString(tableName, "type")

	_sensorMeasurement.fillFieldMap()

	return _sensorMeasurement
}

type sensorMeasurement struct {
	sensorMeasurementDo

	ALL        field.Asterisk
	ID         field.Field
	SensorID   field.Field
	MeasuredAt field.Time
	Value      field.Float64
	Type       field.String

	fieldMap map[string]field.Expr
}

func (s sensorMeasurement) Table(newTableName string) *sensorMeasurement {
	s.sensorMeasurementDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sensorMeasurement) As(alias string) *sensorMeasurement {
	s.sensorMeasurementDo.DO = *(s.sensorMeasurementDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sensorMeasurement) updateTableName(table string) *sensorMeasurement {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.SensorID = field.NewField(table, "sensor_id")
	s.MeasuredAt = field.NewTime(table, "measured_at")
	s.Value = field.NewFloat64(table, "value")
	s.Type = field.NewString(table, "type")

	s.fillFieldMap()

	return s
}

func (s *sensorMeasurement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sensorMeasurement) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sensor_id"] = s.SensorID
	s.fieldMap["measured_at"] = s.MeasuredAt
	s.fieldMap["value"] = s.Value
	s.fieldMap["type"] = s.Type
}

func (s sensorMeasurement) clone(db *gorm.DB) sensorMeasurement {
	s.sensorMeasurementDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sensorMeasurement) replaceDB(db *gorm.DB) sensorMeasurement {
	s.sensorMeasurementDo.ReplaceDB(db)
	return s
}

type sensorMeasurementDo struct{ gen.DO }

type ISensorMeasurementDo interface {
	gen.SubQuery
	Debug() ISensorMeasurementDo
	WithContext(ctx context.Context) ISensorMeasurementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISensorMeasurementDo
	WriteDB() ISensorMeasurementDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISensorMeasurementDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISensorMeasurementDo
	Not(conds ...gen.Condition) ISensorMeasurementDo
	Or(conds ...gen.Condition) ISensorMeasurementDo
	Select(conds ...field.Expr) ISensorMeasurementDo
	Where(conds ...gen.Condition) ISensorMeasurementDo
	Order(conds ...field.Expr) ISensorMeasurementDo
	Distinct(cols ...field.Expr) ISensorMeasurementDo
	Omit(cols ...field.Expr) ISensorMeasurementDo
	Join(table schema.Tabler, on ...field.Expr) ISensorMeasurementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISensorMeasurementDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISensorMeasurementDo
	Group(cols ...field.Expr) ISensorMeasurementDo
	Having(conds ...gen.Condition) ISensorMeasurementDo
	Limit(limit int) ISensorMeasurementDo
	Offset(offset int) ISensorMeasurementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISensorMeasurementDo
	Unscoped() ISensorMeasurementDo
	Create(values ...*sensormeasurement.SensorMeasurement) error
	CreateInBatches(values []*sensormeasurement.SensorMeasurement, batchSize int) error
	Save(values ...*sensormeasurement.SensorMeasurement) error
	First() (*sensormeasurement.SensorMeasurement, error)
	Take() (*sensormeasurement.SensorMeasurement, error)
	Last() (*sensormeasurement.SensorMeasurement, error)
	Find() ([]*sensormeasurement.SensorMeasurement, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sensormeasurement.SensorMeasurement, err error)
	FindInBatches(result *[]*sensormeasurement.SensorMeasurement, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*sensormeasurement.SensorMeasurement) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISensorMeasurementDo
	Assign(attrs ...field.AssignExpr) ISensorMeasurementDo
	Joins(fields ...field.RelationField) ISensorMeasurementDo
	Preload(fields ...field.RelationField) ISensorMeasurementDo
	FirstOrInit() (*sensormeasurement.SensorMeasurement, error)
	FirstOrCreate() (*sensormeasurement.SensorMeasurement, error)
	FindByPage(offset int, limit int) (result []*sensormeasurement.SensorMeasurement, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISensorMeasurementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sensorMeasurementDo) Debug() ISensorMeasurementDo {
	return s.withDO(s.DO.Debug())
}

func (s sensorMeasurementDo) WithContext(ctx context.Context) ISensorMeasurementDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sensorMeasurementDo) ReadDB() ISensorMeasurementDo {
	return s.Clauses(dbresolver.Read)
}

func (s sensorMeasurementDo) WriteDB() ISensorMeasurementDo {
	return s.Clauses(dbresolver.Write)
}

func (s sensorMeasurementDo) Session(config *gorm.Session) ISensorMeasurementDo {
	return s.withDO(s.DO.Session(config))
}

func (s sensorMeasurementDo) Clauses(conds ...clause.Expression) ISensorMeasurementDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sensorMeasurementDo) Returning(value interface{}, columns ...string) ISensorMeasurementDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sensorMeasurementDo) Not(conds ...gen.Condition) ISensorMeasurementDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sensorMeasurementDo) Or(conds ...gen.Condition) ISensorMeasurementDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sensorMeasurementDo) Select(conds ...field.Expr) ISensorMeasurementDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sensorMeasurementDo) Where(conds ...gen.Condition) ISensorMeasurementDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sensorMeasurementDo) Order(conds ...field.Expr) ISensorMeasurementDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sensorMeasurementDo) Distinct(cols ...field.Expr) ISensorMeasurementDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sensorMeasurementDo) Omit(cols ...field.Expr) ISensorMeasurementDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sensorMeasurementDo) Join(table schema.Tabler, on ...field.Expr) ISensorMeasurementDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sensorMeasurementDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISensorMeasurementDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sensorMeasurementDo) RightJoin(table schema.Tabler, on ...field.Expr) ISensorMeasurementDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sensorMeasurementDo) Group(cols ...field.Expr) ISensorMeasurementDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sensorMeasurementDo) Having(conds ...gen.Condition) ISensorMeasurementDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sensorMeasurementDo) Limit(limit int) ISensorMeasurementDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sensorMeasurementDo) Offset(offset int) ISensorMeasurementDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sensorMeasurementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISensorMeasurementDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sensorMeasurementDo) Unscoped() ISensorMeasurementDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sensorMeasurementDo) Create(values ...*sensormeasurement.SensorMeasurement) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sensorMeasurementDo) CreateInBatches(values []*sensormeasurement.SensorMeasurement, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sensorMeasurementDo) Save(values ...*sensormeasurement.SensorMeasurement) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sensorMeasurementDo) First() (*sensormeasurement.SensorMeasurement, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sensormeasurement.SensorMeasurement), nil
	}
}

func (s sensorMeasurementDo) Take() (*sensormeasurement.SensorMeasurement, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sensormeasurement.SensorMeasurement), nil
	}
}

func (s sensorMeasurementDo) Last() (*sensormeasurement.SensorMeasurement, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sensormeasurement.SensorMeasurement), nil
	}
}

func (s sensorMeasurementDo) Find() ([]*sensormeasurement.SensorMeasurement, error) {
	result, err := s.DO.Find()
	return result.([]*sensormeasurement.SensorMeasurement), err
}

func (s sensorMeasurementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sensormeasurement.SensorMeasurement, err error) {
	buf := make([]*sensormeasurement.SensorMeasurement, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sensorMeasurementDo) FindInBatches(result *[]*sensormeasurement.SensorMeasurement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sensorMeasurementDo) Attrs(attrs ...field.AssignExpr) ISensorMeasurementDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sensorMeasurementDo) Assign(attrs ...field.AssignExpr) ISensorMeasurementDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sensorMeasurementDo) Joins(fields ...field.RelationField) ISensorMeasurementDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sensorMeasurementDo) Preload(fields ...field.RelationField) ISensorMeasurementDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sensorMeasurementDo) FirstOrInit() (*sensormeasurement.SensorMeasurement, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sensormeasurement.SensorMeasurement), nil
	}
}

func (s sensorMeasurementDo) FirstOrCreate() (*sensormeasurement.SensorMeasurement, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sensormeasurement.SensorMeasurement), nil
	}
}

func (s sensorMeasurementDo) FindByPage(offset int, limit int) (result []*sensormeasurement.SensorMeasurement, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sensorMeasurementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sensorMeasurementDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sensorMeasurementDo) Delete(models ...*sensormeasurement.SensorMeasurement) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sensorMeasurementDo) withDO(do gen.Dao) *sensorMeasurementDo {
	s.DO = *do.(*gen.DO)
	return s
}
